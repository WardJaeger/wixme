// This is a single-line comment
/*
  Just testing out multiline comments...
  /* ..and also nested comments. */
*/

print("Comparison and equality")
print(1 < 2)
print(-20 <= -20)
print(-3 > -30)
print(74 >= -74)
print(1 == 1)
print(1 != 20)
print("car" == "car")
print(true != 1)
print(false != nil)
// print([1, 2.0, "three"] == [1.0, 2, "three"])
// print(["a", "b", "c"] != [1, 2, 3])
print("")

print("Logical operators")
print(!false == true)
print(!!true == true)
print((true and false) == false)
print((true and true and true) == true)
print((false or true or false) == true)
print((false or (true and false)) == false)
print("")

print("Ternary operator")
print(true ? true : false)
print(false ? false : true)
print("")

print("Arithmetic")
print(1 + 2 == 3)
print(10 - 30 == -20)
print(4.5 * 2 == 9)
print(7.2 / 3 == 2.4)
print(-(17.2) == 0 - 17.2)
print(+35.4 == 35.4)
print("")

print("List/string operations")
print("Ward" + "Jaeger" == "WardJaeger")
print([1, 2] + [3] == [1, 2, 3])
print("abc"[1] == "b")
print(["a", "b", "c"][1] == "b")
print("abcde"[2:] == "cde")
print(["a", "b", "c", "d", "e"][2:] == ["c", "d", "e"])
print("")

print("Escape sequences and other native functions")
print(clock() > 0)
print(clock() - clock() < 0.001)    // This will work as long as the interpreter is fast enough
print(len("Hello, world!") == 13)
print(len([0, 1, 2, 3]) == 4)
print(len("\\\n\t\"") == 4)
print(toString(nil) == "nil")
print(toString(10.2) == "10.2")
print(toString([0.2 + 0.8, "my" + "String", [true]])
  == "[1, \"myString\", [true]]")
print(toNumber("7.5") / toNumber("4") == 1.875)
print("")

print("Variable declaration, initialization, and assignment")
var breakfast = "bagels"
print(breakfast == "bagels")
breakfast = "beignets"
print(breakfast == "beignets")
var number1 = 10
number1 = number1 - 17
print(number1 == -7)
var N
print(N == nil)
print("")

print("Compound assignment")
var food = "fish"
food += " and chips"
print(food == "fish and chips")
var number2 = 10
number2 /= 4
print(number2 == 2.5)
number2++
print(number2 == 3.5)
print(number2-- == 2.5)
print("")

print("Dynamic typing")
var a = 10
print(a == 10)
a = false
print(!a)
a = "Hello"
print(a + ", World" == "Hello, World")
a = [1, 2, 3]
print(a[1] == 2)
print("")

print("Scoping")
var x1 = "Red"
var x2 = "Green"
{
  var x1 = "Blue"
  x2 = "Alpha"
  print(x1 == "Blue")
  print(x2 == "Alpha")
}
print(x1 == "Red")
print(x2 == "Alpha")
print("")

print("Conditional execution")
var condition = true
if (condition) {
  print(true)
} else {
  print(false)
}
condition = false
if (condition) {
  print(false)
} else {
  print(true)
}
print("")

print("Loops")
var i = 1
while (i < 10) i++
print(i == 10)
var j
for (j = 1; j < 100; j = 3*j - 1) {
  var i = j
}
print(j == 122)
print(i == 10)
print("")

print("Functions")
fun doNothing() {
  // Do nothing
}
print(doNothing() == nil)
fun getSum(a, b) {
  return a + b
}
print(getSum(1, 3) == 4)
print("")

print("Closures")
var a = "global"
{
  fun showA() {
    return a
  }
  print(showA() == "global")
  var a = "block"
  print(showA() == "global")
}
fun getCounter() {
  var i = 0
  fun count() {
    return i++
  }
  return count
}
var counter = getCounter()
for (var i = 1; i <= 10; i++) {
  if (counter() != i) {
    print(false)
  } else if (i == 10) {
    print(true)
  }
}
print(getCounter()() == 1)
print("")

print("Classes")
class Breakfast {
  init(meat, bread) {
    this.meat = meat
    this.bread = bread
  }
  serve(who) {
    return "Enjoy your " + this.meat + " and " +
        this.bread + ", " + who + "."
  }
}
var baconAndToast = Breakfast("bacon", "toast")
var sausageAndPancakes = Breakfast("sausage", "pancakes")
print(baconAndToast.serve("Dear Reader")
  == "Enjoy your bacon and toast, Dear Reader.")
print(sausageAndPancakes.serve("customer")
  == "Enjoy your sausage and pancakes, customer.")
print("")
